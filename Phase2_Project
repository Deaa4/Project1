Phase II: User Requirements and Application Specifications

1. Chosen Development Model

Chosen Model: Agile Development
Justification: Agile is chosen due to its flexibility and iterative approach, allowing continuous improvements based on user feedback. Given that the project involves a database-driven application with multiple stakeholders (users, admins, and clients), Agile ensures that evolving requirements can be integrated efficiently without disrupting the overall development process.


2. User Requirements

a. Stakeholders
End-Users: Individuals who browse and inquire about packages. They need a simple and intuitive interface for navigation and inquiries.
Administrators: Manage packages, categories, subcategories, and user inquiries. Their role is to update, modify, and ensure database integrity.
Developers: Responsible for building and maintaining the system, ensuring functionality, security, and performance.
Clients (Businesses): May list their travel packages on the platform, requiring a structured approach to pricing, categorization, and customer interaction.

b. User Stories
	•	User Type: Visitor
Story: 'As a visitor, I want to browse available packages by category and subcategory so that I can quickly find relevant travel options.
Benefit: Enhances user experience and increases engagement.'
	•	User Type: Registered User
Story: 'As a registered user, I want to send inquiries about packages so that I can receive more details from the administrator.
Benefit: Provides a structured way to communicate with the system and receive responses.'
	•	User Type: Administrator
Story: 'As an administrator, I want to manage package details, categories, and inquiries so that the system remains up-to-date.
Benefit: Ensures data consistency and accurate package listings.'


3. Functional Requirements

a. Brief Description
Users should be able to browse packages by category and subcategory.
Users should be able to submit inquiries regarding packages.
Administrators should be able to manage package listings, user inquiries, and categories.
The system should store user inquiries and provide status updates.
User authentication should be implemented for administrators.

b. Acceptance Criteria
Users can successfully search and filter packages.
Inquiry submissions must store user details and package ID in the database.
Administrators can create, update, and delete packages.
A database entry is created when a user submits an inquiry.
Only authenticated administrators can manage the platform.


4. Non-Functional Requirements

a. Brief Description
Performance: The system should load package listings within 2 seconds.
Usability: The interface should be intuitive and accessible to all user types.
Scalability: The system should handle an increasing number of users and package listings.
Security: Data should be encrypted, and user authentication must be implemented.

b. Acceptance Criteria
Page load times should be under 5 seconds for 90% of users.
A usability test should show that 70% of users can navigate without assistance.
The database should support at least 5,000 entries efficiently.
All sensitive data (passwords, emails) should be encrypted using secure hashing techniques.


5. Application Specifications

a. Architecture
The system follows a client-server architecture, where users interact via a web-based interface, and a backend server manages database operations.
The backend connects to a structured relational database to store package details, inquiries, and user information.

b. Database Model
The database includes the following key tables:
  •	Category: Stores main package categories.
	•	Subcategory: Defines subcategories linked to categories.
	•	Package: Stores package details, including price and images.
	•	Users: Manages authentication details for administrators.
	•	Enquiry: Stores user inquiries with status updates.
	•	Contact Us: Stores messages from users.

c. Technologies Used
Backend: PHP or Node.js
Frontend: HTML, CSS, JavaScript (React or Vue.js)
Database: MySQL
Security: bcrypt for password hashing, HTTPS for secure connections

d. User Interface Design
A homepage with a search function for browsing packages.
A package details page displaying images, descriptions, and pricing.
A contact form for inquiries.
An admin panel for managing packages and user inquiries.

e. Security Measures
Authentication: User credentials stored securely with hashed passwords.
Input Validation: Protection against SQL injection and XSS.
Encryption: Sensitive user data is encrypted before storage.
Access Control: Admins have restricted access to critical functionalities.
